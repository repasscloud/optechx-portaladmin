@page "/"
@attribute [Authorize]

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-md-4 mb-3">
            <img src="@Picture" alt="User Image" class="img-fluid rounded-circle">
        </div>
        <div class="col-md-8 mb-3">
            <h4>@Username</h4>
            <h3>@AuthType</h3>
            <p>
                Support Access: <span class="@((hasSupportRole.HasValue && hasSupportRole.Value) ? "text-success" : "text-danger")">
                    @((hasSupportRole.HasValue && hasSupportRole.Value) ? "Yes" : "No")
                </span>
            </p>
            <p>
                Billing Access: <span class="@((hasBillingRole.HasValue && hasBillingRole.Value) ? "text-success" : "text-danger")">
                    @((hasBillingRole.HasValue && hasBillingRole.Value) ? "Yes" : "No")
                </span>
            </p>
        </div>
    </div>
</div>


@code {
    private string Username = "Anonymous User";

    private string AuthType = "";
    private string Picture = "";

    private bool? hasBillingRole;
    private bool? hasSupportRole;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var state = await authenticationState;

            Username = state?.User?.Identity?.Name ?? string.Empty;

            AuthType = state?.User?.Identity?.AuthenticationType ?? string.Empty;

            Picture = state?.User.Claims
                        .Where(c => c.Type.Equals("picture"))
                        .Select(c => c.Value)
                        .FirstOrDefault() ?? string.Empty;

            hasBillingRole = state?.User.IsInRole("Billing");
            hasSupportRole = state?.User.IsInRole("Support");
        }
        await base.OnInitializedAsync();
    }
}